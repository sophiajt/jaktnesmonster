import ppu { PPU }
import apu { APU }
import cart { load_cart, Cart, Mirroring }
import joypad { Joypad }

enum SystemLoadStatus {
    Success(System)
    Error(String)
}

class System {
    scratch_ram: [u8]
    prg_ram: [u8]
    public ppu: PPU
    public apu: APU
    public cart: Cart
    public joypad: Joypad
    public debug: bool
    public prg_rom_bank_0: usize
    public prg_rom_bank_1: usize
    public mapper_1_shift_register: u8
    public mapper_1_bit_count: u8
    public mapper_1_prg_rom_bank_mode: u8
    public mapper_1_chr_rom_bank_mode: u8
    public mmc3_bank_register: usize
    public mmc3_prg_rom_8k_bank_0: usize
    public mmc3_prg_rom_8k_bank_1: usize
    public mmc3_prg_rom_8k_bank_2: usize
    public mmc3_prg_rom_8k_bank_3: usize
    public mmc3_prg_rom_bank_mode: usize
    public frame: u64,

    public fn init(filename: String) throws -> SystemLoadStatus {
        let status = load_cart(filename)
        guard status is Success(cart) else {
            return SystemLoadStatus::Error("not a valid ROM file")
        }

        mut ppu = PPU::init(
            chr_rom_pages: cart.chr_rom_pages
            mapper: cart.mapper
        )

        ppu.set_mirroring(cart.mirroring)

        return SystemLoadStatus::Success(
            System(
                scratch_ram: [0u8; 0x800]
                prg_ram: [0u8; 0x2000]
                ppu
                apu: APU::init()
                cart
                joypad: Joypad::init()
                debug: false
                prg_rom_bank_0: 0
                prg_rom_bank_1: cart.prg_rom_pages.size() - 1
                mapper_1_shift_register: 0
                mapper_1_bit_count: 0
                mapper_1_prg_rom_bank_mode: 3
                mapper_1_chr_rom_bank_mode: 0
                mmc3_bank_register: 0
                mmc3_prg_rom_8k_bank_0: 0
                mmc3_prg_rom_8k_bank_1: 1
                mmc3_prg_rom_8k_bank_2: (cart.prg_rom_pages.size() * 2) - 2
                mmc3_prg_rom_8k_bank_3: (cart.prg_rom_pages.size() * 2) - 1
                mmc3_prg_rom_bank_mode: 0
                frame: 1
            )
        )
    }

    fn mmc3_bank_data(mut this, value: u8) {
        match .mmc3_bank_register {
            0b000 => {  // R0: Select 2 KB CHR bank at PPU $0000-$07FF (or $1000-$17FF)
                .ppu.mmc3_chr_rom_2k_bank_0 = value as! usize
            }
            0b001 => {  // R1: Select 2 KB CHR bank at PPU $0800-$0FFF (or $1800-$1FFF)
                .ppu.mmc3_chr_rom_2k_bank_1 = value as! usize
            }
            0b010 => {  // R2: Select 1 KB CHR bank at PPU $1000-$13FF (or $0000-$03FF)
                .ppu.mmc3_chr_rom_1k_bank_0 = value as! usize
            }
            0b011 => {  // R3: Select 1 KB CHR bank at PPU $1400-$17FF (or $0400-$07FF)
                .ppu.mmc3_chr_rom_1k_bank_1 = value as! usize
            }
            0b100 => {  // R4: Select 1 KB CHR bank at PPU $1800-$1BFF (or $0800-$0BFF)
                .ppu.mmc3_chr_rom_1k_bank_2 = value as! usize
            }
            0b101 => {  // R5: Select 1 KB CHR bank at PPU $1C00-$1FFF (or $0C00-$0FFF)
                .ppu.mmc3_chr_rom_1k_bank_3 = value as! usize
            }
            0b110 => {  // R6: Select 8 KB PRG ROM bank at $8000-$9FFF (or $C000-$DFFF)
                if .mmc3_prg_rom_bank_mode == 0 {
                    .mmc3_prg_rom_8k_bank_0 = value as! usize
                    .mmc3_prg_rom_8k_bank_2 = (.cart.prg_rom_pages.size() * 2) - 2
                }
                else {
                    .mmc3_prg_rom_8k_bank_0 = (.cart.prg_rom_pages.size() * 2) - 2
                    .mmc3_prg_rom_8k_bank_2 = value as! usize
                }
            }
            0b111 => {  // R7: Select 8 KB PRG ROM bank at $A000-$BFFF
                .mmc3_prg_rom_8k_bank_1 = value as! usize
            }
            else => {}
        }
    }

    fn mmc3_bank_select(mut this, value: u8) {
        .mmc3_bank_register = (value as! usize) & 7
        .mmc3_prg_rom_bank_mode = (value as! usize >> 6) & 1
        .ppu.mmc3_chr_a12_inversion = (value as! usize >> 7) & 1
    }

    fn mmc3_read_byte(this, address: u16) -> u8 {
        if address >= 0x8000 and address <= 0x9fff {
            if (.mmc3_prg_rom_8k_bank_0 & 1) == 1 {
                return .cart.prg_rom_pages[(.mmc3_prg_rom_8k_bank_0 - 1) / 2][address - 0x6000]
            } else {
                return .cart.prg_rom_pages[.mmc3_prg_rom_8k_bank_0 / 2][address - 0x8000]
            }
        } else if address >= 0xa000 and address <= 0xbfff {
            if (.mmc3_prg_rom_8k_bank_1 & 1) == 1 {
                return .cart.prg_rom_pages[(.mmc3_prg_rom_8k_bank_1 - 1) / 2][address - 0x8000]
            } else {
                return .cart.prg_rom_pages[.mmc3_prg_rom_8k_bank_1 / 2][address - 0xa000]
            }
        } else if address >= 0xc000 and address <= 0xdfff {
            if (.mmc3_prg_rom_8k_bank_2 & 1) == 1 {
                return .cart.prg_rom_pages[(.mmc3_prg_rom_8k_bank_2 - 1) / 2][address - 0xa000]
            } else {
                return .cart.prg_rom_pages[.mmc3_prg_rom_8k_bank_2 / 2][address - 0xc000]
            }
        } else if address >= 0xe000 and address <= 0xffff {
            if (.mmc3_prg_rom_8k_bank_3 & 1) == 1 {
                return .cart.prg_rom_pages[(.mmc3_prg_rom_8k_bank_3 - 1) / 2][address - 0xc000]
            } else {
                return .cart.prg_rom_pages[.mmc3_prg_rom_8k_bank_3 / 2][address - 0xe000]
            }
        } else if address >= 0x6000 and address < 0x8000 {
            return .prg_ram[address - 0x6000]
        } else {
            println("we should not be here: mmc3_read_byte of {:0>4x}", address)
            abort()
        }
    }

    fn mmc3_write_byte(mut this, address: u16, value: u8) {
        match address {
            0x8000u16..0xa000u16 => {
                if (address & 1) == 0 {
                    .mmc3_bank_select(value)
                } else {
                    .mmc3_bank_data(value)
                }
            }
            0xa000u16..0xc000u16 => {
                if (address & 1) == 0 {
                    if (value & 1) == 1 {
                        .ppu.set_mirroring(Mirroring::Horizontal)
                    } else {
                        .ppu.set_mirroring(Mirroring::Vertical)
                    }
                }
            }
            0xc000u16..0xe000u16 => {
                if (address & 1) == 0 {
                    .ppu.mmc3_irq_counter_reload = value
                } else {
                    .ppu.mmc3_irq_counter = 0
                }
            }
            0xe000u16..0xffffu16 => {
                if (address & 1) == 0 {
                    .ppu.mmc3_irq_enabled = false
                } else {
                    .ppu.mmc3_irq_enabled = true
                    .ppu.mmc3_irq_flag = false // FIXME: Should we reset CPU IRQ flag here?
                }
            }
            else => {
                println("we should not be here: mmc3_write_byte of {:0>4x}", address)
                abort()
            }
        }
    }

    fn mapper_read_byte(this, address: u16) -> u8 {
        return match .cart.mapper {
            4 => .mmc3_read_byte(address)
            else => {
                if address >= 0x8000 and address <= 0xbfff {
                    return .cart.prg_rom_pages[.prg_rom_bank_0][address - 0x8000]
                } else if address >= 0xc000 {
                    return .cart.prg_rom_pages[.prg_rom_bank_1][address - 0xc000]
                } else if address >= 0x6000 and address < 0x8000 {
                    return .prg_ram[address - 0x6000]
                } else {
                    println("we should not be here: mapper_read_byte of {:0>4x}", address)
                    abort()
                }
            }
        }
    }

    fn mapper_write_byte(mut this, address: u16, value: u8) {
        // eprintln("Write of {:0>2x} to {:0>4x}", value, address)
        if .cart.mapper == 2 {
            .prg_rom_bank_0 = value as! usize & 7
            return
        }
        if .cart.mapper == 3 {
            let mapper_3_bank = (value as! usize & 3) * 2
            .ppu.chr_rom_page_0000 = mapper_3_bank
            .ppu.chr_rom_page_1000 = mapper_3_bank + 1
            return
        }
        if .cart.mapper == 4 {
            .mmc3_write_byte(address, value)
            return
        }
        if .cart.mapper == 7 {
            let mapper_7_bank = (value as! usize & 7) << 1
            .prg_rom_bank_0 = mapper_7_bank
            .prg_rom_bank_1 = mapper_7_bank + 1

            if (value & 0x10) == 0x10 {
                .ppu.set_mirroring(Mirroring::OneScreenUpper)
            } else {
                .ppu.set_mirroring(Mirroring::Vertical)
            }
            return
        }
        if .cart.mapper == 11 {
            let chr_rom_mask = (.cart.chr_rom_pages.size() / 2) - 1
            let mapper_11_prg_bank = (value as! usize & 3) * 2
            let mapper_11_chr_bank = ((value as! usize >> 4) & chr_rom_mask) * 2
            .prg_rom_bank_0 = mapper_11_prg_bank
            .prg_rom_bank_1 = mapper_11_prg_bank + 1
            .ppu.chr_rom_page_0000 = mapper_11_chr_bank
            .ppu.chr_rom_page_1000 = mapper_11_chr_bank + 1
            return
        }
        if (value & 0b1000_0000) == 0b1000_0000 {
            .mapper_1_shift_register = 0
            .mapper_1_bit_count = 0
        } else {
            .mapper_1_shift_register |= (value & 0x1) << (.mapper_1_bit_count)
            .mapper_1_bit_count++

            if .mapper_1_bit_count == 5 {
                // Do something here
                // eprintln("Write of {:0>2x} to {:0>4x}", .mapper_1_shift_register, address)

                if address >= 0x8000 and address <= 0x9fff {
                    // Control register
                    try {
                        .mapper_1_control(data: .mapper_1_shift_register)
                    } catch {

                    }
                } else if address >= 0xa000 and address <= 0xbfff {
                    .mapper_1_chr_rom_bank_switch0(data: .mapper_1_shift_register)
                } else if address >= 0xc000 and address <= 0xdfff {
                    .mapper_1_chr_rom_bank_switch1(data: .mapper_1_shift_register)
                } else if address >= 0xe000 and address <= 0xffff {
                    .mapper_1_prg_rom_bank_switch(data: .mapper_1_shift_register)
                }

                .mapper_1_bit_count = 0
                .mapper_1_shift_register = 0
            }
        }
    }

    public fn mapper_1_control(mut this, data: u8) throws {
        match data & 0x3 {
            0 => .ppu.set_mirroring(Mirroring::OneScreenLower)
            1 => .ppu.set_mirroring(Mirroring::OneScreenUpper)
            2 => .ppu.set_mirroring(Mirroring::Vertical)
            else => .ppu.set_mirroring(Mirroring::Horizontal)
        }

        .mapper_1_prg_rom_bank_mode = (data >> 2) & 0x3
        .mapper_1_chr_rom_bank_mode = (data >> 4)
    }

    public fn mapper_1_chr_rom_bank_switch0(mut this, data: u8) {
        if .mapper_1_chr_rom_bank_mode == 0 {
            let byte = data & 0x1e
            .ppu.chr_rom_page_0000 = byte as! usize
            .ppu.chr_rom_page_1000 = byte as! usize + 1
        } else {
            let byte = data & 0x1f
            .ppu.chr_rom_page_0000 = byte as! usize
        }
    }

    public fn mapper_1_chr_rom_bank_switch1(mut this, data: u8) {
        if .mapper_1_chr_rom_bank_mode == 1 {
            let byte = data & 0x1f
            .ppu.chr_rom_page_1000 = data as! usize
        }
    }

    public fn mapper_1_prg_rom_bank_switch(mut this, data: u8) {
        if .mapper_1_prg_rom_bank_mode == 2 {
            // Switching 0xc000
            let page = data & 0b1111
            .prg_rom_bank_1 = data as! usize
        } else if .mapper_1_prg_rom_bank_mode == 3 {
            // Switching 0x8000
            let page = data & 0b1111
            .prg_rom_bank_0 = page as! usize
        } else {
            let page = data & 0b1110
            .prg_rom_bank_0 = page as! usize
            .prg_rom_bank_1 = (page + 1) as! usize
        }
    }

    public fn read_byte(mut this, address: u16) -> u8 {
        if address < 0x2000 {
            return .scratch_ram[address & 0x7ff]
        } else if address < 0x4000 {
            return .ppu.read_ppu_addr(address)
        } else if address == 0x4016 {
            return .joypad.read_joypad()
        } else if address < 0x4020 {
            return .apu.read_apu_addr(address)
        } else if address >= 0x6000 and address < 0x8000 {
            return .prg_ram[address - 0x6000]
        } else {
            return .mapper_read_byte(address)
        }
    }

    public fn read_word(mut this, address: u16) -> u16 {
        mut output = 0u16
        output += .read_byte(address: address + 1) as! u16
        output = output << 8

        output += .read_byte(address) as! u16

        return output
    }

    public fn read_word_wrapped(mut this, address: u16) -> u16 {
        mut addr = address
        let address_l = .read_byte(address: addr)

        let indirect_address_h = address >> 8
        // TODO: should this be an unchecked_add?
        addr += 1
        addr = (indirect_address_h << 8) + (addr & 0xff)

        let address_h = .read_byte(address: addr)

        return (address_h as! u16 << 8) + (address_l as! u16)
    }

    public fn write_byte(mut this, address: u16, value: u8) {
        if address < 0x2000 {
            .scratch_ram[address & 0x7ff] = value
        } else if address < 0x4000 {
            .ppu.write_ppu_addr(address, value)
        } else if address == 0x4014 {
            .oam_dma(value)
            try {
                .ppu.dma_tick()
            } catch {}
        } else if address == 0x4016 {
            if (value & 0x1) == 0x1 {
                .joypad.poll_joypad()
            }
        } else if address < 0x4020 {
            .apu.write_apu_addr(address, value)
        } else if address >= 0x6000 and address <= 0x7fff {
            .prg_ram[address - 0x6000] = value
        } else {
            .mapper_write_byte(address, value)
        }
    }

    public fn oam_dma(mut this, value: u8) {
        let address = 0x100u16 * (value as! u16)

        for addr in address..(address + 256) {
            .ppu.oam[addr - address] = .read_byte(address: addr)
        }

        .ppu.oam_addr_write(value: 0x00)

        // println("{}", .ppu.oam)
    }

    public fn debug_enable(mut this) {
        .debug = true
    }

    public fn debug_disable(mut this) {
        .debug = false
    }
}
