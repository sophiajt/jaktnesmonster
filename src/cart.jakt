enum Mirroring {
    Horizontal
    Vertical
    OneScreenLower
    OneScreenUpper
}

enum Region {
    NTSC
    PAL
    Multi
    Dendy
}

class Cart {
    public prg_rom: usize
    public chr_rom: usize
    public mirroring: Mirroring
    public battery_present: bool
    public mapper: u8
    public region: Region
    public prg_rom_pages: [[u8]]
    public chr_rom_pages: [[u8]]

    public fn info(this) {
        println("prg_rom: {}", .prg_rom)
        println("chr_rom: {}", .chr_rom)
        println("mirroring: {}", .mirroring)
        println("mapper: {}", .mapper)
    }
}

enum CartLoadStatus {
    Success(Cart)
    NotARom
}

fn is_supported_mapper(mapper: u8) -> bool {
    return match mapper {
        0u8..5u8 => true
        7 => true
        11 => true
        else => false
    }
}

fn load_cart(filename: String) throws -> CartLoadStatus {
    mut file = File::open_for_reading(filename)
    let buffer = file.read_all()

    // ensure this is a valid ROM file
    guard buffer.size() > 16 and buffer[0] == b'N' and buffer[1] == b'E' and buffer[2] == b'S' and buffer[3] == 0x1a else {
        return CartLoadStatus::NotARom
    }

    let prg_rom = buffer[4] as! usize
    let chr_rom = buffer[5] as! usize

    let mirroring = match (buffer[6]) & 0x1 {
        0 => Mirroring::Horizontal
        1 => Mirroring::Vertical
        else => Mirroring::Horizontal
    }

    let battery_present = ((buffer[6] & 0x2) == 0x2)

    mut mapper = buffer[6] >> 4
    mapper += buffer[7] & 0xf0;

    guard is_supported_mapper(mapper) else {
        eprintln("Mapper {} is not currently supported", mapper)
        abort()
    }

    let region = match buffer[12] & 0x3 {
        0 => Region::NTSC
        1 => Region::PAL
        2 => Region::Multi
        3 => Region::Dendy
        else => Region::NTSC
    }

    mut prg_rom_pages: [[u8]] = []
    let prg_rom_page_size: usize = 16 * 1024
    mut current_start: usize = 16

    for page in 0..prg_rom {
        mut current_page: [u8] = []
        for offset in 0..prg_rom_page_size {
            current_page.push(buffer[current_start + page * prg_rom_page_size + offset])            
        }
        prg_rom_pages.push(current_page)
    }

    mut chr_rom_pages: [[u8]] = []
    let chr_rom_page_size: usize = 8 * 1024
    current_start += prg_rom_page_size * prg_rom;

    for page in 0..chr_rom {
        mut current_page: [u8] = []
        for offset in 0..0x1000uz {
            current_page.push(buffer[current_start + page * chr_rom_page_size + offset])            
        }
        chr_rom_pages.push(current_page)
        
        mut current_page_part_2: [u8] = []
        for offset in 0x1000uz..0x2000uz {
            current_page_part_2.push(buffer[current_start + page * chr_rom_page_size + offset])            
        }
        chr_rom_pages.push(current_page_part_2)
    }

    if chr_rom == 0 {
        // Assume we're in CHR RAM
        mut current_page: [u8] = [0u8; 0x1000]
        chr_rom_pages.push(current_page)
        
        mut current_page_part_2: [u8] = [0u8; 0x1000]
        chr_rom_pages.push(current_page_part_2)
    }

    let cart = Cart(prg_rom, 
        chr_rom, mirroring, battery_present, mapper, region, prg_rom_pages, chr_rom_pages)

    cart.info()

    return CartLoadStatus::Success(cart)
}

