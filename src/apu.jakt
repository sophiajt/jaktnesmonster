class APU {
    timer: u16,
    pulse1: Pulse,
    pulse2: Pulse,
    triangle: Triangle,
    noise: Noise,
    public buffer: [i16],

    public fn init() throws -> APU {
        return APU(timer: 0,
                   pulse1: Pulse::init(),
                   pulse2: Pulse::init(),
                   triangle: Triangle::init(),
                   noise: Noise::init(),
                   buffer: [0i16; 44100 / 60])
    }

    public fn read_apu_addr(this, address: u16) -> u8 {
        return 0
    }

    public fn write_4008(mut this, value: u8) {
        .triangle.register1_write(value)
    }

    public fn write_400a(mut this, value: u8) {
        .triangle.register3_write(value)
    }

    public fn write_400b(mut this, value: u8) {
        .triangle.register4_write(value)
    }

    public fn write_apu_addr(mut this, address: u16, value: u8) {
        match address {
        //     0x4000 => .write_4000(value)
        //     0x4001 => .pulse1.register2_write(value)
        //     0x4002 => .pulse1.register3_write(value)
        //     0x4003 => .pulse1.register4_write(value)
        //     0x4004 => .pulse2.register1_write(value)
        //     0x4005 => .pulse2.register2_write(value)
        //     0x4006 => .pulse2.register3_write(value)
        //     0x4007 => .pulse2.register4_write(value)
            0x4008 => .write_4008(value)
            0x400a => .write_400a(value)
            0x400b => .write_400b(value)
        //     0x400c => .noise.register1_write(value)
        //     0x400e => .noise.register3_write(value)
        //     0x400f => .noise.register4_write(value)
            else => {
            }
        }
    }

    public fn tick(mut this, cycles: u16) throws {
        // .pulse1.tick(cycles)
        // .pulse2.tick(cycles)
        // .triangle.tick(cycles)
        // .noise.tick(cycles)
    }

    public fn render(mut this) {
        mut i = 0
        while i < 44100 / 60 {
            .buffer[i] = .pulse1.buffer[i] + 
                         .pulse2.buffer[i] + 
                         .triangle.buffer[i] + 
                         .noise.buffer[i]
            ++i
        }
    }
}

struct Pulse {
    timer: u16
    length_counter: u8
    envelope: u8
    sweep: u8
    buffer: [i16]

    public fn init() throws -> Pulse {
        return Pulse(timer: 0, 
                     length_counter: 0,
                     envelope: 0,
                     sweep: 0,
                     buffer: [0i16; 44100 / 60])
    }

    public fn register1_write(mut this, value: u8) {

    }

    public fn register2_write(mut this, value: u8) {

    }

    public fn register3_write(mut this, value: u8) {

    }

    public fn register4_write(mut this, value: u8) {

    }

    public fn tick(mut this, cycles: u16) throws {
        // TODO: handle overflow
        .timer += cycles
    }
}

struct Triangle {
    timer: u16
    length_counter: u8
    linear_counter: u8
    buffer: [i16]

    public fn init() throws -> Triangle {
        return Triangle(timer: 0,
                        length_counter: 0,
                        linear_counter: 0, 
                        buffer: [0i16; 44100 / 60])
    }

    public fn tick(mut this, cycles: u16) throws {
        // TODO: handle overflow
        .timer += cycles / 2
    }

    public fn register1_write(mut this, value: u8) {
        let control_flag = (value & 0b1000_0000) >> 7
        let counter_reload = value & 0b0111_1111

        // println("triangle:");
        // print("control flag: {:0>2x} ", control_flag)
        // println("counter reload: {:0>2x} ", control_flag)
    }

    public fn register3_write(mut this, value: u8) {
        // println("timer low: {:0>2x}", value)
    }

    public fn register4_write(mut this, value: u8) {
        let timer_high = (value & 0b111)
        // println("timer high: {:0>2x}", timer_high)
    }

}

struct Noise {
    timer: u16
    length_counter: u8
    envelope: u8
    linear_feedback_shift_register: u8
    buffer: [i16]

    public fn init() throws -> Noise {
        return Noise(timer: 0,
                     length_counter: 0,
                     envelope: 0,
                     linear_feedback_shift_register: 0,
                     buffer: [0i16; 44100 / 60])
    }

    public fn tick(mut this, cycles: u16) throws {
        // TODO: handle overflow
        .timer += cycles
    }

    public fn register1_write(mut this, value: u8) {

    }

    public fn register3_write(mut this, value: u8) {

    }

    public fn register4_write(mut this, value: u8) {

    }

}